{"version":3,"sources":["utilities/validators.js","components/common/FormsControl/FormsControl.js","components/common/FormsControl/formControl.module.css","components/LoginPage/LoginPage.js"],"names":["required","value","console","log","maxLength","length","TextArea","input","meta","rest","flagError","touched","error","className","styles","formControl","Input","ErrorFormAuth","props","errorData","errorMessage","module","exports","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","component","validate","name","type","placeholder","err","captcha","src","connect","state","isAuth","auth","logInName","login","stop_submit","to","data","Email","Password","RememberMe"],"mappings":"wGAAA,oEAAO,IAAMA,EAAW,SAACC,GAErB,GADAC,QAAQC,IAAIF,IACTA,EAGH,MAAO,qBAEEG,EAAY,SAACA,GAAD,OAAe,SAACH,GACrC,GAAGA,GAASA,EAAMI,OAASD,EACvB,MAAM,iBAAN,OAAwBA,M,sLCNnBE,EAAU,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,KAASC,EAAU,gCACzCC,EAAYF,EAAKG,SAAWH,EAAKI,MACvC,OACI,yBAAKC,UAAS,UAAKC,IAAOC,YAAZ,YAA2BL,GAAaI,IAAOF,QACzD,8CAAcL,EAAWE,IACxBC,GAAa,8BAAOF,EAAKI,SAIzBI,EAAO,SAAC,GAA4B,IAA3BT,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,KAASC,EAAU,gCACtCC,EAAYF,EAAKG,SAAWH,EAAKI,MAEvC,OADAV,QAAQC,IAAIK,EAAKI,OAEb,yBAAKC,UAAS,UAAKC,IAAOC,YAAZ,YAA2BL,GAAaI,IAAOF,QACzD,2CAAWL,EAAWE,IACrBC,GAAa,6BAAMF,EAAKI,SAIxBK,EAAgB,SAACC,GAC1B,OACI,yBAAKL,UAAWC,IAAOK,WACnB,8BAAOD,EAAME,iB,oBCxBzBC,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,UAAY,iC,iCCDhH,sFA2CMC,EACNC,YAAU,CACNC,KAAM,SADVD,EA/BkB,SAACN,GACf,OACI,0BAAMQ,SAAUR,EAAMS,cAClB,6BACI,kBAAC,IAAD,CAAOC,UAAWZ,IAAOa,SAAU,CAAC7B,KAAW8B,KAAK,QAAQC,KAAK,OAAOC,YAAY,WAExF,6BACI,kBAAC,IAAD,CAAOJ,UAAWZ,IAAOa,SAAU,CAAC7B,KAAW8B,KAAK,WAAWC,KAAK,WAAWC,YAAY,cAE/F,6BACI,kBAAC,IAAD,CAAOJ,UAAU,QAAQG,KAAK,WAAWD,KAAK,eADlD,eAMA,6BACI,kBAAC,IAAD,CAAeV,aAAcF,EAAMe,OAGnCf,EAAMgB,QAEN,6BACI,yBAAKC,IAAKjB,EAAMgB,UAChB,kBAAC,IAAD,CAAON,UAAU,QAAQG,KAAK,OAAOD,KAAK,UAAUE,YAAY,uIAC3D,GAEb,4BAAQnB,UAAU,eAAlB,aAqCGuB,uBANS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,OACnBE,UAAWH,EAAME,KAAKE,MACtBP,QAASG,EAAME,KAAKL,QACpBD,IAAKI,EAAME,KAAKN,OAEoB,CAACQ,UAAOC,iBAAjCN,EA5BG,SAAClB,GAOf,OAAGA,EAAMoB,OAED,kBAAC,IAAD,CAAUK,GAAI,sBAIlB,oCACI,qCACA,kBAACpB,EAAD,CACIU,IAAKf,EAAMe,IACXC,QAAShB,EAAMgB,QACfR,SAjBK,SAACkB,GACX1B,EAAMe,KACLf,EAAMwB,YAAY,MAEtBxB,EAAMuB,MAAMG,EAAKC,MAAOD,EAAKE,SAAUF,EAAKG,WAAYH,EAAKV","file":"static/js/7.0bc23823.chunk.js","sourcesContent":["export const required = (value) => {\r\n    console.log(value);\r\n    if(value){\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\nexport const maxLength = (maxLength) => (value) => {\r\n    if(value && value.length > maxLength){\r\n        return `Max length is ${maxLength}`\r\n    }\r\n    return undefined\r\n}","import React from \"react\";\r\nimport styles from './formControl.module.css'\r\n\r\nexport const TextArea =({input, meta, ...rest}) => {\r\n    const flagError = meta.touched && meta.error\r\n    return (\r\n        <div className={`${styles.formControl} ${flagError && styles.error}`}>\r\n            <textarea {...input} {...rest}/>\r\n            {flagError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Input =({input, meta, ...rest}) => {\r\n    const flagError = meta.touched && meta.error\r\n    console.log(meta.error);\r\n    return (\r\n        <div className={`${styles.formControl} ${flagError && styles.error}`}>\r\n            <input {...input} {...rest}/>\r\n            {flagError && <div>{meta.error}</div>}\r\n        </div>\r\n    )\r\n}\r\nexport const ErrorFormAuth = (props) => {\r\n    return (\r\n        <div className={styles.errorData}>\r\n            <span>{props.errorMessage}</span>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formControl_formControl__1H8zP\",\"error\":\"formControl_error__ePzui\",\"errorData\":\"formControl_errorData__3RfHI\"};","import React from \"react\";\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport {required} from \"../../utilities/validators\";\r\nimport {ErrorFormAuth, Input} from \"../common/FormsControl/FormsControl\";\r\nimport {connect} from \"react-redux\";\r\nimport { login, stop_submit } from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n/* \r\n    handleSubmit: \r\n    1) e.preventDefault\r\n    2) get all from form and put in data\r\n    3) props.onChange(data)\r\n*/\r\nconst LoginFrom = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Input} validate={[required]} name='Email' type='text' placeholder='login'/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} validate={[required]} name='Password' type='password' placeholder='password'/>\r\n            </div>\r\n            <div>\r\n                <Field component='input' type='checkbox' name='RememberMe'/>\r\n                remember me\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <ErrorFormAuth errorMessage={props.err}/>\r\n            </div>\r\n            {\r\n                props.captcha \r\n                ? \r\n                <div>\r\n                    <img src={props.captcha}></img> \r\n                    <Field component='input' type='text' name='captcha' placeholder='Введите текст с картинки'/>\r\n                </div> : ''\r\n            }\r\n            <button className=\"btn-default\">Login</button>\r\n        </form>\r\n    )\r\n}\r\nconst LoginReduxForm = \r\nreduxForm({\r\n    form: 'login'\r\n})(LoginFrom)\r\n\r\nconst LoginPage = (props) => {\r\n    const onSubmit = (data) => {\r\n        if(props.err){\r\n            props.stop_submit(null)\r\n        }\r\n        props.login(data.Email, data.Password, data.RememberMe, data.captcha)\r\n    }\r\n    if(props.isAuth){\r\n        return(\r\n            <Redirect to={'/profile/overview'}/>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <h3>LOGIN</h3>\r\n            <LoginReduxForm \r\n                err={props.err}\r\n                captcha={props.captcha} \r\n                onSubmit={onSubmit}/>\r\n        </>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    logInName: state.auth.login,\r\n    captcha: state.auth.captcha,\r\n    err: state.auth.err,\r\n})\r\nexport default connect(mapStateToProps, {login, stop_submit})(LoginPage)\r\n"],"sourceRoot":""}